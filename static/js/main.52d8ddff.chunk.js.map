{"version":3,"sources":["api/index.js","App.js","reportWebVitals.js","index.js"],"names":["converter","data","a","from","to","fetch","res","json","rate","conversion_rate","App","values","value","label","useState","setfrom","setto","all","setall","fromValue","setFromValue","toValue","setToValue","Loading","setLoading","useEffect","_","index","length","element","currency","push","className","style","fontSize","padding","color","fontWeight","onChange","e","target","type","width","height","options","defaultValue","map","elment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52d8ddff.chunk.js","sourcesContent":["export const converter = async (data) => {\r\n  var { from, to } = data;\r\n  var res = await fetch(\r\n    \"https://v6.exchangerate-api.com/v6/7d3c4902218eaea98e0c33b3/pair/\" +\r\n      from +\r\n      \"/\" +\r\n      to\r\n  );\r\n  var rate = await res.json();\r\n  return rate.conversion_rate;\r\n};\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { converter } from \"./api/index\";\nimport Select from \"react-select\";\nfunction App() {\n  var values = [\n    { value: \"INR\", label: \"Indian Rupee\" },\n    { value: \"USD\", label: \"United States Dollar\" },\n    { value: \"AED\", label: \"United Arab Emirates Dirham\" },\n    { value: \"GBP\", label: \"Pound sterling\" },\n    { value: \"CAD\", label: \"Canadian Dollar\" },\n    { value: \"SGD\", label: \"Singapore Dollar\" },\n    { value: \"EUR\", label: \"Euro\" },\n    { value: \"JPY\", label: \"Japanese Yen\" },\n    { value: \"PKR\", label: \"Pakistani Rupee\" },\n    { value: \"ZAR\", label: \"South African Rand\" },\n  ];\n  var [from, setfrom] = useState(values[0]);\n  var [to, setto] = useState(values[1]);\n  const [all, setall] = useState([]);\n  const [fromValue, setFromValue] = useState(1);\n  const [toValue, setToValue] = useState(0);\n  const [Loading, setLoading] = useState(false)\n  useEffect(async () => {\n    setLoading(true)\n    setToValue(await converter({ from: from.value, to: to.value }));\n    if (from.value == to.value) {\n      var _ = [];\n\n      for (let index = 0; index < values.length; index++) {\n        const element = values[index];\n        _.push({\n          currency: element.label,\n          value:\n            fromValue *\n            (await converter({ from: from.value, to: element.value })),\n        });\n      }\n\n      setall(_);\n    }\n    setLoading(false)\n  },[from,to]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        <p\n          style={{\n            fontSize: \"small\",\n            padding: \"0\",\n            color: \"grey\",\n            fontWeight: \"bold\",\n          }}\n        >\n          {fromValue} {from.label} equals to{\" \"}\n        </p>\n        <h4\n          style={{\n            fontSize: \"large\",\n            padding: \"0\",\n            color: \"#121212\",\n            fontWeight: \"bold\",\n          }}\n        >\n          {toValue} {to.label}{\" \"}\n        </h4>\n        <div className=\"grid\">\n          <input\n            value={fromValue}\n            onChange={async (e) => {\n              setFromValue(e.target.value);\n              setToValue(\n                e.target.value *\n                  (await converter({ from: from.value, to: to.value }))\n              );\n            }}\n            type=\"number\"\n          ></input>\n          <span style={{ width: \"10px\", height: \"10px\" }}></span>\n          <Select\n            className=\"select\"\n            options={values}\n            onChange={async (e) => {\n              setfrom(e);\n              setToValue(\n                fromValue * (await converter({ from: e.value, to: to.value }))\n              );\n            }}\n            defaultValue={values[0]}\n          ></Select>\n\n          <input\n            value={toValue}\n            onChange={async (e) => {\n              setToValue(e.target.value);\n              setFromValue(\n                e.target.value *\n                  (await converter({ from: to.value, to: from.value }))\n              );\n            }}\n            type=\"number\"\n          ></input>\n\n          <Select\n            className=\"select\"\n            options={values}\n            onChange={async (e) => {\n              setto(e);\n              setFromValue(\n                toValue * (await converter({ from: from.value, to: e.value }))\n              );\n            }}\n            defaultValue={values[1]}\n          ></Select>\n        </div>\n      </div>\n      {from.value === to.value ? (\n        <div>\n          {all.map((elment) => (\n            <p>\n              {fromValue} {from.label} is equals to {elment.value}{\" \"}\n              {elment.currency}\n            </p>\n          ))}\n        </div>\n      ) : null}\n      {Loading?<div className=\"loading\"></div>:null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}